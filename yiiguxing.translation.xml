<application>
  <component name="AppStorage">
    <histories>
      <item value="authorize Requests" />
      <item value="dispatcher Types" />
      <item value="password Generated" />
      <item value=" Affirmative" />
      <item value="Affirmative Based" />
      <item value="is Allow If All Abstain Decisions" />
      <item value="check Allow If All Abstain Decisions" />
      <item value="abstained" />
      <item value="every AccessDecisionVoter abstained" />
      <item value="To get this far, every AccessDecisionVoter abstained" />
      <item value="is Fully Authenticated" />
      <item value="IS AUTHENTICATED ANONYMOUSLY" />
      <item value="IS AUTHENTICATED REMEMBERED" />
      <item value="IS AUTHENTICATED FULLY" />
      <item value="z the secure object type" />
      <item value="* * This implementation supports any type of class, because it does not query the * presented secure object." />
      <item value="ACCESS ABSTAIN" />
      <item value="the configuration attributes associated with the secured object" />
      <item value="ACCESS DENIED" />
      <item value="ACCESS GRANTED" />
      <item value="decide" />
      <item value="This check prevents a duplicate AbstractAuthenticationFailureEvent if the parent AuthenticationManager already published it" />
      <item value="If the parent AuthenticationManager was attempted and failed than it will publish an AbstractAuthenticationFailureEvent" />
      <item value="Parent was null, or didn't authenticate (or throw an exception)." />
      <item value="This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it" />
      <item value="If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent" />
      <item value="// If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent // This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it" />
      <item value="erase Credentials" />
      <item value="Authentication is complete. Remove credentials and other secret data // from authentication" />
      <item value="Credentials Container" />
      <item value="erase Credentials After Authentication" />
      <item value="may throw ProviderNotFound even though a provider in the child already // handled the request" />
      <item value="ignore as we will throw below if no other exception occurred prior to // calling parent and the parent" />
      <item value="ignore as we will throw below if no other exception occurred prior to // calling parent and the parent // may throw ProviderNotFound even though a provider in the child already // handled the request" />
      <item value="Provider Not Found Exception" />
      <item value="Allow the parent to try." />
      <item value="Authentication Exception" />
      <item value="prepare Exception" />
      <item value="// SEC-546: Avoid polling additional providers if auth failure is due to // invalid account status" />
      <item value="noop" />
      <item value="It looks like your project is using the App Engine SDK. While the App Engine SDK is still supported, Google recommends that you migrate to the Google Cloud SDK. The Cloud SDK provides new features such as App Engine Flexible support and Google Cloud Debugger integration. Learn more about migrating to the new Cloud tools." />
      <item value="include" />
      <item value="artifacts" />
      <item value="Configuration for archive artifacts." />
      <item value="Did you mean to add slf4j-simple?" />
      <item value="Found slf4j-api dependency but no providers were found." />
      <item value="Do not place your application dependencies here; they belong // in the individual module build.gradle files" />
      <item value="renew Session Id" />
      <item value="violation" />
      <item value="This is an interface contract violation" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="722" />
        <entry key="ENGLISH" value="723" />
        <entry key="ESTONIAN" value="1" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="13" />
        <entry key="RUSSIAN" value="2" />
        <entry key="FRENCH" value="2" />
        <entry key="CZECH" value="3" />
        <entry key="CORSICAN" value="10" />
        <entry key="CROATIAN" value="2" />
        <entry key="LATIN" value="3" />
        <entry key="JAPANESE" value="1" />
        <entry key="SWEDISH" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>