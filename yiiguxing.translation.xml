<application>
  <component name="AppStorage">
    <histories>
      <item value="supplier" />
      <item value="Represents" />
      <item value="Represents a supplier of results." />
      <item value="identity" />
      <item value="Returns a composed function that first applies the {@code before}" />
      <item value="compose" />
      <item value="the function result" />
      <item value="t the function argument" />
      <item value="Applies this function to the given argument." />
      <item value="Returns a predicate that represents the logical negation of this * predicate." />
      <item value="negate" />
      <item value="a predicate that will be logically-ANDed with this * predicate" />
      <item value="Evaluates this predicate on the given argument." />
      <item value="the type of the input to the predicate" />
      <item value="Represents a predicate (boolean-valued function) of one argument." />
      <item value="Functional Interface" />
      <item value="生成实际进度" />
      <item value="neighboring" />
      <item value="aggregate File Ext Attr" />
      <item value="file Entry Descendant Ids" />
      <item value="File Entry" />
      <item value="Recourse Type" />
      <item value="redundant" />
      <item value="check Business Type Equals" />
      <item value="业务类型" />
      <item value="get Current Stage" />
      <item value="get All Workflow" />
      <item value="create Workflow" />
      <item value="扩展属性" />
      <item value="send Message For Add Enclosure" />
      <item value="Unable to locate appropriate constructor on class [com.bimbox.bimserver.service.sfs.entity.FileVersion]. Expected arguments are: com.bimbox.bimserver.service.sfs.entity.FileVersion at org.hibernate.hql.internal.ast.tree.ConstructorNode.resolveConstructor(ConstructorNode.java:182) at org.hibernate.hql.internal.ast.tree.ConstructorNode.prepare(ConstructorNode.java:144) at org.hibernate.hql.internal.ast.HqlSqlWalker.processConstructor(HqlSqlWalker.java:1092) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectExpr(HqlSqlBaseWalker.java:2359) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectExprList(HqlSqlBaseWalker.java:2225) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectClause(HqlSqlBaseWalker.java:1496) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:581) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:309) at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:257) at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262) at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190) at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142) at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:115) at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:76) at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:150) at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:302) at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:240) at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1894) at org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:531) at org.hibernate.jpa.criteria.CriteriaQueryImpl$1.buildCompiledQuery(CriteriaQueryImpl.java:316) at org.hibernate.jpa.criteria.compile.CriteriaCompiler.compile(CriteriaCompiler.java:130) at org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:699) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498)" />
      <item value="get Equals Search Operator" />
      <item value="If true, generate an instance method to obtain a builder that is initialized with the values of this instance." />
      <item value="deleted instance passed to merge:" />
      <item value="约束" />
      <item value="search Attribute" />
      <item value="The exact meaning of &quot;aggressive optimizations&quot; will differ * between proxies, but there is usually some tradeoff. * Default is &quot;false&quot;." />
      <item value="Set whether proxies should perform aggressive optimizations." />
      <item value="set Optimize" />
      <item value="* Return whether to proxy the target class directly as well as any interfaces." />
      <item value="* Convenience superclass for configuration used in creating proxies, * to ensure that all proxy creators have consistent properties." />
      <item value="frozen" />
      <item value="expose Proxy" />
      <item value="opaque" />
      <item value="optimize" />
      <item value="proxy Target Class" />
      <item value="serial Version UID" />
      <item value="use serialVersionUID from Spring 1.2 for interoperability */" />
      <item value="TargetSource cannot determine target class: &quot; + &quot;Either an interface or a target is required for proxy creation." />
      <item value="has No User Supplied Proxy Interfaces" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="107" />
        <entry key="ENGLISH" value="108" />
        <entry key="CORSICAN" value="10" />
        <entry key="SWEDISH" value="1" />
      </map>
    </option>
  </component>
</application>